{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "title": "Beacon Response Meta Section",
  "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
  "definitions": {
    "ApiVersion": {
      "description": "Version of API, e.g. in request or response. Beacon uses a Github-style, \"v\"-prefixed semantic versioning format.",
      "examples": [
        "v2.0.1",
        "v0.3"
      ],
      "type": "string"
    },
    "Filters": {
      "description": "Ontology based filters. A CURIE syntax is encouraged to be used.",
      "example": [
        "BTO:0000199",
        "PATO:0000383"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "Granularity": {
      "default": "boolean",
      "description": "Level of detail of the response:\n* `boolean`: returns true/false' responses * `count`: adds the total number of positive results found * `record`: returns details for every row. In cases where a Beacon prefers to return records with fewer than allattributes, different strategies have to be considered w/o adding them to the current design, e.g.:\n    - keeping non-mandatory attributes empty\n    - Beacon to provide a minimal record definition",
      "enum": [
        "boolean",
        "count",
        "record"
      ],
      "type": "string"
    },
    "ListOfSchemas": {
      "description": "Set of schemas to be used in the response to a request.",
      "items": {
        "$ref": "#/definitions/SchemasPerEntity"
      },
      "type": "array"
    },
    "SchemasPerEntity": {
      "description": "Schema to be used for the requested entry type in the response.",
      "properties": {
        "entityType": {
          "example": "individual",
          "type": "string"
        },
        "schema": {
          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
          "examples": [
            "./ga4gh-beacon-dataset-v2.0.0",
            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
          ],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "apiVersion": {
      "$ref": "#/definitions/ApiVersion"
    },
    "beaconId": {
      "description": "The Id of a Beacon. Usually a reversed domain string, but any URI is acceptable. The purpose of this attribute is, in the context of a Beacon network, to disambiguate responses coming from different Beacons.",
      "examples": [
        "org.example.beacon.v2",
        "org.progenetix.beacon"
      ],
      "type": "string"
    },
    "receivedRequestSummary": {
      "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server. This summary can help to identify differences between the incoming request and its interpretation or processing, e.g. in the response granularity or pagination. The required properties include those that should be part of every request.",
      "properties": {
        "apiVersion": {
          "$ref": "#/definitions/ApiVersion"
        },
        "filters": {
          "$ref": "#/definitions/Filters"
        },
        "requestedGranularity": {
          "$ref": "#/definitions/Granularity"
        },
        "requestedSchemas": {
          "$ref": "#/definitions/ListOfSchemas",
          "minItems": 0
        }
      },
      "required": [
        "apiVersion",
        "requestedSchemas",
        "pagination",
        "requestedGranularity"
      ],
      "type": "object"
    },
    "returnedGranularity": {
      "$ref": "#/definitions/Granularity"
    },
    "returnedSchemas": {
      "$ref": "#/definitions/ListOfSchemas"
    }
  },
  "required": [
    "beaconId",
    "apiVersion",
    "returnedSchemas",
    "returnedGranularity",
    "receivedRequestSummary"
  ]
}